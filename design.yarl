
channel BusCh {
    
    typedef logic[ADR_WIDTH-1:0] address_t;
    typedef logic[DAT_WIDTH-1:0] data_t;

    address_t  Addr;
    data_t OutData;
    data_t InData;
    logic req;
    logic wen;
    logic ack;

    port master{ 
        output Addr;
        output OutData;
        input  InData;
        output req;
        output wen;
        input  ack;
    }

    port slave{
        input master.OutData  InData;  // alias
        output master.InData  OutData; // alias
        output ack;
        // not defined signals are enable implicitly as input
    }

    port monitor{
        // not defined signals are enable implicitly as input
    }
}


channel MemIfCh {
    typedef BusCh.address_t address_t;
    typedef BusCh.data_t data_t;

    logic en;
    logic write;
    logic ack;
    address_t Addr;
    data_t OutData;
    data_t InData;

    port master{ 
        output en;
        output write;
        input ack;
        output  Addr;
        output  OutData;
        input InData;
        
        func write(address_t addr, data_t data ) 
        {
            en      = 1;
            write   = 1;
            Addr    = addr;
            OutData = data;
            @(ack);
            en      = 0;
        }
        func read(address_t addr, action<data_t> cb)
        {
            en = 1;
            write = 0;
            Addr = addr;
            @(ack);
            cb(InData);
        }
    }

    port slave{
        input master.OutData InData;
        output master.InData OutData;
        output ack;
    }
    
    port monitor{}
}


// same as Bridge = module(...)
module Bridge(input clk,
              input rst,
              BusCh.slave bus,  // channel are flatten in Verilog
              MemIfCh.master mem)
{
    event proc(clk.posedge || rst) {
        logic [11:0] count; // writable in this event

        if(~rst) {
            bus.reset();
            mem.reset();
            count = 0;
        } else {
            @bus.req;
            if(bus.wen) {
                bus.ack = 1;
                mem.write(bus.Addr, bus.InData);
            }
            else {
                mem.read(bus.Addr, (data_t d) => {
                        bus.OutData = d;
                        bus.ack = 1;
                    });
            }
            count += 1;
        }
    }
    
    event count_mon()
    {
        $display(fsm.count);
    }
}


// same as Top = module(...)
module Top(input clk,
           input rst,
           BusCh.slave bus,
           MemIfCh.master mem)
{
    logic delay_en;

    // same as b1 = Bridge(clk,rst,bus,mem)
    Bridge b1(clk, rst, 
              BusCh.slave(.Addr(bus.Addr), // channel instantiation creates new channel connection
                          .OutData(bus.OutData), 
                          .InData(bus.InData),
                          .req(bus.req), 
                          .en(delay_en),
                          .ack(bus.ack) ),
              mem);
    
    event(clk.posedge) {
        delay_en = bus.wen;
    }
}
